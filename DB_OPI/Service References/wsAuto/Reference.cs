//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DB_OPI.wsAuto {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wsAuto.wsWPSystemSoap")]
    public interface wsWPSystemSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsertMSMQMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string IsertMSMQMessage(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dino_Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Dino_Test(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadEquipmentBlueTape_DBOPI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadEquipmentBlueTape_DBOPI(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadEquipmentState_DBOPI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadEquipmentState_DBOPI(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadLotState_DBOPI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadLotState_DBOPI(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Exe_EQPMaterialState_TurnInv", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Exe_EQPMaterialState_TurnInv(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GET_RECIPE_NAME_DBWB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GET_RECIPE_NAME_DBWB(string LOTNO, string RECIPE_TYPE, ref string RECIPE_NAME, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GET_WB_RECIPE_PATH", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GET_WB_RECIPE_PATH(string EQPID, ref string RECIPE_PATH, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddTCS_ErrorLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddTCS_ErrorLog(string EQPID, string AlarmID, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDownloadRecipeEQP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadDownloadRecipeEQP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertSPC_Interface", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertSPC_Interface(string strXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadPlasmaPriorityforWB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadPlasmaPriorityforWB(string InXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/mail_test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object mail_test(string MailSubject, string Message, string MailGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadApConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadApConfig(string userNo, string apName, string apID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteApConfigByKeyValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteApConfigByKeyValue(string userNo, string apName, string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadApConfigByKeyValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadApConfigByKeyValue(string userNo, string apName, string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertApConfig_Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertApConfig_Test(string userNo, string apName, string apID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertApConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertApConfig(string userNo, string apName, string apID, string[] configKeys, string[] configValues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadMaterialRecordJson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadMaterialRecordJson(string userNo, string eqpNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Add_Material_Record", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Add_Material_Record(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryMMSettingData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string QueryMMSettingData(string userNo, string prodNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryPreTestPotID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string QueryPreTestPotID(string userNo, string glEqpNo, string lotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryPreTestData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string QueryPreTestData(string userNo, string potID, string glEqpNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MaterialLogoff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MaterialLogoff(string userNo, string eqpNo, string matLotNo, string logonStTimeStr, string logonEndTimeStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditEQPPRSTATE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditEQPPRSTATE(string W_CARRIERNO, string W_CARRIERNO_PR, string W_LOTNO, string W_STATE, string S_CARRIERNO_PR, string S_COLOR, string S_STARTTIME_STR, string S_IN_P_TIME_STR, string S_OUT_P_TIME_STR, string S_IN_C_TIME_STR, string S_OUT_C_TIME_STR, int S_FLAG_I, int S_FLAG_O, string S_ENDTIME_STR, string S_STATE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelEQPPRSTATE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelEQPPRSTATE(string EQUIPMENTNO, string CARRIERNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadOPIEQPBASIS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadOPIEQPBASIS(string EQUIPMENTNO, string SERVER_IP, string COMPORTTYPE, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddOPIEQPBASIS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddOPIEQPBASIS(
                    string EQUIPMENTNO, 
                    string CLIENT_IP, 
                    string COMPORT, 
                    string BAUDRATE, 
                    string DATABIT, 
                    string STOPBIT, 
                    string PARITY, 
                    string COMPORTTYPE, 
                    string IO_CHANEL, 
                    string MSMQ, 
                    string MSMQ_FACT, 
                    string RECIPE, 
                    string HOST_IP, 
                    string HOSTNAME, 
                    string HOSTPORT, 
                    string ALARMHOST, 
                    string CLIENT_PORT, 
                    string SERVER_IP, 
                    string SERVER_PORT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelOPIEQPBASIS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelOPIEQPBASIS(string EQUIPMENTNO, string SERVER_IP, string COMPORTTYPE, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GETPRCarrierState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GETPRCarrierState(string CarrierNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditPRCarrierState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditPRCarrierState(string CARRIERNO, string LOTNO, string CARRIERSTATE, string UserNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEventLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddEventLog(string ServiceName, string UserNo, string KEYFIELD, string KEYVALUE, string DESCRIPTION, string ComputerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadGLUEQUANTITY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadGLUEQUANTITY(string LOTNO, string MONO, string EQUIPMENTNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddGLUEQUANTITY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddGLUEQUANTITY(
                    string STATUS, 
                    string MONO, 
                    string PRODUCTNO, 
                    string PRODUCTTYPE, 
                    string LOTNO, 
                    string EQUIPMENTNO, 
                    string PHOSPHOR_A_NAME, 
                    string PHOSPHOR_A_PERCENT, 
                    string PHOSPHOR_B_NAME, 
                    string PHOSPHOR_B_PERCENT, 
                    string VALUE1, 
                    string VALUE2, 
                    string VALUE3, 
                    string BLANKWEIGHT1, 
                    string BLANKWEIGHT2, 
                    string BLANKWEIGHT3, 
                    string BLANKWEIGHT4, 
                    string BLANKWEIGHT5, 
                    string BLANKWEIGHT6, 
                    string TOTALWEIGHT1, 
                    string TOTALWEIGHT2, 
                    string TOTALWEIGHT3, 
                    string TOTALWEIGHT4, 
                    string TOTALWEIGHT5, 
                    string TOTALWEIGHT6, 
                    string SECONDS1, 
                    string SECONDS2, 
                    string SECONDS3, 
                    string SECONDS4, 
                    string SECONDS5, 
                    string SECONDS6, 
                    string CREATOR, 
                    string GLUEP_PERCENT, 
                    string CHANGE_POWDERRATIO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelGLUEQUANTITY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelGLUEQUANTITY(string LOTNO, string MONO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditGLUEQUANTITY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditGLUEQUANTITY(
                    string W_LOTNO, 
                    string W_MONO, 
                    string W_AddSQL, 
                    string STATUS, 
                    string MONO, 
                    string PRODUCTNO, 
                    string PRODUCTTYPE, 
                    string LOTNO, 
                    string EQUIPMENTNO, 
                    string PHOSPHOR_A_NAME, 
                    string PHOSPHOR_A_PERCENT, 
                    string PHOSPHOR_B_NAME, 
                    string PHOSPHOR_B_PERCENT, 
                    string VALUE1, 
                    string VALUE2, 
                    string VALUE3, 
                    string BLANKWEIGHT1, 
                    string BLANKWEIGHT2, 
                    string BLANKWEIGHT3, 
                    string BLANKWEIGHT4, 
                    string BLANKWEIGHT5, 
                    string BLANKWEIGHT6, 
                    string TOTALWEIGHT1, 
                    string TOTALWEIGHT2, 
                    string TOTALWEIGHT3, 
                    string TOTALWEIGHT4, 
                    string TOTALWEIGHT5, 
                    string TOTALWEIGHT6, 
                    string SECONDS1, 
                    string SECONDS2, 
                    string SECONDS3, 
                    string SECONDS4, 
                    string SECONDS5, 
                    string SECONDS6, 
                    string CREATOR, 
                    string GLUEP_PERCENT, 
                    string CHANGE_POWDERRATIO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadE_SCALELOG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadE_SCALELOG(string RID, string MONO, string EQUIPMENTNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddE_SCALELOG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddE_SCALELOG(
                    string STATUS, 
                    string RID, 
                    string MONO, 
                    string PRODUCTNO, 
                    string EQUIPMENTNO, 
                    string TARGETWEIGHT, 
                    string TARGETWEIGHTMAX, 
                    string TARGETWEIGHTMIN, 
                    string CREATOR, 
                    string RECORD1, 
                    string RECORD2, 
                    string RECORD3, 
                    string RECORD4, 
                    string RECORD5, 
                    string RECORD6, 
                    string RECORD7, 
                    string RECORD8);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelE_SCALELOG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelE_SCALELOG(string RID, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditE_SCALELOG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditE_SCALELOG(
                    string RID, 
                    string STATUS, 
                    string MONO, 
                    string PRODUCTNO, 
                    string EQUIPMENTNO, 
                    string TARGETWEIGHT, 
                    string TARGETWEIGHTMAX, 
                    string TARGETWEIGHTMIN, 
                    string RECORD1, 
                    string RECORD2, 
                    string RECORD3, 
                    string RECORD4, 
                    string RECORD5, 
                    string RECORD6, 
                    string RECORD7, 
                    string RECORD8, 
                    string W_AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckCarrierJoinLotState_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckCarrierJoinLotState_TEST(string CarrierNoList, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckCarrierJoinLotState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckCarrierJoinLotState(string CarrierNoList, string Flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadLFWEIGHT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadLFWEIGHT(string LOTNO, string MONO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddLFWEIGHT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddLFWEIGHT(string MONO, string LOTNO, string NO, string BEFORE, string AFTER, string LACK, string AVERAGEWEIGHT, string RESULT, string TARGETWEIGHT, string RID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelLFWEIGHT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelLFWEIGHT(string LOTNO, string MONO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditLFWEIGHT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditLFWEIGHT(string LOTNO, string MONO, string NO, string BEFORE, string AFTER, string LACK, string AVERAGEWEIGHT, string RESULT, string TARGETWEIGHT, string RID, string W_AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadLFQTY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int LoadLFQTY(string MONO, string LOTNO, string CarrierNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadRecipeConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadRecipeConfig(string PRODUCTNO, string RECIPEID, string ACTIVE, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRecipeID_DSP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRecipeID_DSP(string RID, string LOTNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDSP_PARAMETER_LotNo_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadDSP_PARAMETER_LotNo_TEST(string LOTNO, string CarrierNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDSP_PARAMETER_LotNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LoadDSP_PARAMETER_LotNo(string LotNo, ref System.Data.DataSet dsReturn, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadPretestParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadPretestParameter(string LOTNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadPretestData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadPretestData(string RID, string MONO, string LOTNO, string PRODUCTNO, string STATUS, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPretestData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddPretestData(
                    string STATUS, 
                    string RID, 
                    string MONO, 
                    string PRODUCTNO, 
                    string LOTNO, 
                    string CIE_AVG, 
                    string CIE_STD, 
                    string NEEDLE1_AVG, 
                    string NEEDLE1_STD, 
                    string NEEDLE1_BEFORE, 
                    string NEEDLE1_AFTER, 
                    string NEEDLE1_PROPORTION, 
                    string NEEDLE2_AVG, 
                    string NEEDLE2_STD, 
                    string NEEDLE2_BEFORE, 
                    string NEEDLE2_AFTER, 
                    string NEEDLE2_PROPORTION, 
                    string NEEDLE3_AVG, 
                    string NEEDLE3_STD, 
                    string NEEDLE3_BEFORE, 
                    string NEEDLE3_AFTER, 
                    string NEEDLE3_PROPORTION, 
                    string NEEDLE4_AVG, 
                    string NEEDLE4_STD, 
                    string NEEDLE4_BEFORE, 
                    string NEEDLE4_AFTER, 
                    string NEEDLE4_PROPORTION, 
                    string NEEDLE5_AVG, 
                    string NEEDLE5_STD, 
                    string NEEDLE5_BEFORE, 
                    string NEEDLE5_AFTER, 
                    string NEEDLE5_PROPORTION, 
                    string NEEDLE6_AVG, 
                    string NEEDLE6_STD, 
                    string NEEDLE6_BEFORE, 
                    string NEEDLE6_AFTER, 
                    string NEEDLE6_PROPORTION, 
                    string NEEDLE7_AVG, 
                    string NEEDLE7_STD, 
                    string NEEDLE7_BEFORE, 
                    string NEEDLE7_AFTER, 
                    string NEEDLE7_PROPORTION, 
                    string NEEDLE8_AVG, 
                    string NEEDLE8_STD, 
                    string NEEDLE8_BEFORE, 
                    string NEEDLE8_AFTER, 
                    string NEEDLE8_PROPORTION, 
                    string ALARM, 
                    string EQUIPMENTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPretestData_XY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddPretestData_XY(
                    string STATUS, 
                    string RID, 
                    string MONO, 
                    string PRODUCTNO, 
                    string LOTNO, 
                    string CIE_AVG, 
                    string CIE_STD, 
                    string NEEDLE1_AVG, 
                    string NEEDLE1_STD, 
                    string NEEDLE1_BEFORE, 
                    string NEEDLE1_AFTER, 
                    string NEEDLE1_PROPORTION, 
                    string NEEDLE2_AVG, 
                    string NEEDLE2_STD, 
                    string NEEDLE2_BEFORE, 
                    string NEEDLE2_AFTER, 
                    string NEEDLE2_PROPORTION, 
                    string NEEDLE3_AVG, 
                    string NEEDLE3_STD, 
                    string NEEDLE3_BEFORE, 
                    string NEEDLE3_AFTER, 
                    string NEEDLE3_PROPORTION, 
                    string NEEDLE4_AVG, 
                    string NEEDLE4_STD, 
                    string NEEDLE4_BEFORE, 
                    string NEEDLE4_AFTER, 
                    string NEEDLE4_PROPORTION, 
                    string NEEDLE5_AVG, 
                    string NEEDLE5_STD, 
                    string NEEDLE5_BEFORE, 
                    string NEEDLE5_AFTER, 
                    string NEEDLE5_PROPORTION, 
                    string NEEDLE6_AVG, 
                    string NEEDLE6_STD, 
                    string NEEDLE6_BEFORE, 
                    string NEEDLE6_AFTER, 
                    string NEEDLE6_PROPORTION, 
                    string NEEDLE7_AVG, 
                    string NEEDLE7_STD, 
                    string NEEDLE7_BEFORE, 
                    string NEEDLE7_AFTER, 
                    string NEEDLE7_PROPORTION, 
                    string NEEDLE8_AVG, 
                    string NEEDLE8_STD, 
                    string NEEDLE8_BEFORE, 
                    string NEEDLE8_AFTER, 
                    string NEEDLE8_PROPORTION, 
                    string ALARM, 
                    string EQUIPMENTNO, 
                    string CIE_TYPE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelPretestData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelPretestData(string LOTNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditPretestData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditPretestData(string LOTNO, string STATUS, string ALARM, string W_AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPretestRawData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddPretestRawData(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPretestRawHeader", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddPretestRawHeader(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPretestRawHeader_XY", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddPretestRawHeader_XY(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadSysParameter_PreTest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LoadSysParameter_PreTest(string PARAMETERTYPE, string PARAMETERNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadSysParameter_ReturnValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadSysParameter_ReturnValue(string PARAMETERTYPE, string PARAMETERNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Calc_Front_RawData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Calc_Front_RawData(string QQ, string DP_TAB_HEADER, string DP_TAB_DATA, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadSysParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadSysParameter(string PARAMETERTYPE, string PARAMETERNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadinjection_ReturnEQPNO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string fnLoadinjection_ReturnEQPNO(string RID, string LOTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPKGMDPSysEventLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddPKGMDPSysEventLog(string USERID, string SERVICENAME, string DESCRIPTION, string KEYFIELD, string KEYVALUE, string COMPUTERNAME);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPKGMDPLabelQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddPKGMDPLabelQueue(string KEYVALUE, string LABELFORMAT, string PRINTER, string PARAMETER, string MEMO, string PRINTCOUNT, string STATUS, string NUMBEROFCOPIES, string PRINTORDER);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPKGMDPLabelQueue_MMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddPKGMDPLabelQueue_MMS(string KEYVALUE, string LABELFORMAT, string PRINTER, string PARAMETER, string MEMO, string PRINTCOUNT, string STATUS, string NUMBEROFCOPIES, string PRINTORDER);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadErrorNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadErrorNo(string OPNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowEQPACCStateJoinBasis", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ShowEQPACCStateJoinBasis(string EQPNO, string EquipmentType, string AccessoryType, string AccessoryNo, string AccessoryVersion, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowEQPACCBasisJoinState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ShowEQPACCBasisJoinState(string EQPNO, string AccessoryType, string AccessoryNo, string AccessoryVersion, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDS_Pump", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadDS_Pump(string PUMPNO, string EQUIPMENTNO, string DATECODE, string ACTIVE, string STATUS, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddDS_Pump", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddDS_Pump(string PUMPNO, string EQUIPMENTNO, string DATECODE, string ACTIVE, string STATUS, string CREATOR, double LifeTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditDS_Pump", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditDS_Pump(string PUMPNO, string EQUIPMENTNO, string DATECODE, string ACTIVE, string STATUS, string strENDTIME, string strWASHTIME_S, string strWASHTIME_E, string USERID_WASH, string W_AddSQL, string set_DATECODE, string Reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelDS_Pump", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelDS_Pump(string DATECODE, string EQUIPMENTNO, string PUMPNO, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDS_Pump_Merge", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddDS_Pump_Merge", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditDS_Pump_Merge", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID, string W_AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelDS_Pump_Merge", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DelDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadRID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LoadRID(string RID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadRIDList_ByPOTID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadRIDList_ByPOTID(string POTID, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadEQPIP_ByLotNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet LoadEQPIP_ByLotNo(string LotNo, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDSP_TASK_JoinRecipe", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadDSP_TASK_JoinRecipe(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetlotInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetlotInfo(string LotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetlotInfoForExcel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetlotInfoForExcel(string LotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/funCheckDateTimeFormat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string funCheckDateTimeFormat(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadOPIEquipmentBasis", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadOPIEquipmentBasis(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetISPNList_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetISPNList_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetISPNList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetISPNList(string TableName, string Type, ref System.Data.DataSet dsISPNLIST, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetISData_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetISData_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetISData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetISData(string TableName, string StartTime, string EndTime, string ProductNo, string Type, string Group_key, string Color_Type, string Version_Type, int QueryType, ref System.Data.DataSet dsISDataList, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateISData_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateISData_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateISData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateISData(string TableName, string BarCode, string GroupKey, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateGroupKey_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GenerateGroupKey_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateGroupKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GenerateGroupKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddISData_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddISData_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddISData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddISData(
                    string ISNO, 
                    string TEST_DATE, 
                    string PRODUCTNO, 
                    string TEST_TYPE, 
                    string TEST_KIND, 
                    string VF1_VALUE, 
                    string VF2_VALUE, 
                    string IF_VALUE, 
                    string LVLM, 
                    string X, 
                    string Y, 
                    string WD_VALUE, 
                    string WP_VALUE, 
                    string W_VALUE, 
                    string CCT_VALUE, 
                    string CRI_VALUE, 
                    string LV_VALUE, 
                    string X_VALUE, 
                    string Y_VALUE, 
                    string VF_VALUE, 
                    string WP_VALUE1, 
                    string FILE_NAME, 
                    string SHEET_NAME, 
                    string STANDARD_KIND, 
                    string STANDARD_VF1_VALUE, 
                    string STANDARD_VF2_VALUE, 
                    string STANDARD_IF_VALUE, 
                    string STANDARD_LVLM, 
                    string STANDARD_X, 
                    string STANDARD_Y, 
                    string STANDARD_WD, 
                    string STANDARD_WP, 
                    string STANDARD_W, 
                    string STANDARD_CCT, 
                    string STANDARD_CRI, 
                    string CREATE_DATE, 
                    string GROUP_KEY, 
                    string COLOR_TYPE, 
                    string BARCODE, 
                    string VERSION_TYPE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddISSTDData_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddISSTDData_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddISSTDData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddISSTDData(
                    string ISNO, 
                    string TEST_DATE, 
                    string PRODUCTNO, 
                    string TEST_KIND, 
                    string FILE_NAME, 
                    string STANDARD_VF1_VALUE, 
                    string STANDARD_VF2_VALUE, 
                    string STANDARD_IF_VALUE, 
                    string STANDARD_LVLM, 
                    string STANDARD_X, 
                    string STANDARD_Y, 
                    string STANDARD_WD, 
                    string STANDARD_WP, 
                    string STANDARD_W, 
                    string STANDARD_CCT, 
                    string STANDARD_CRI, 
                    string GROUP_KEY, 
                    string COLOR_TYPE, 
                    string VERSION_TYPE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddISTurnValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddISTurnValue(
                    string IS_VALUE, 
                    string ACCESSORYNO, 
                    string ACCESSORYTYPE, 
                    string MODELNO, 
                    string PRODUCTNO, 
                    string USERNO, 
                    string MA, 
                    string CIE_X, 
                    string CIE_Y, 
                    string Z, 
                    string R9, 
                    string VF, 
                    string WD, 
                    string WP, 
                    string CRI, 
                    string CIE_X_2, 
                    string CIE_Y_2, 
                    string Z_2, 
                    string R9_2, 
                    string VF_2, 
                    string WD_2, 
                    string WP_2, 
                    string CRI_2, 
                    string CIE_X_3, 
                    string CIE_Y_3, 
                    string Z_3, 
                    string R9_3, 
                    string VF_3, 
                    string WD_3, 
                    string WP_3, 
                    string CRI_3, 
                    string K, 
                    string IS_SETTING, 
                    string NOTE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteISTurnValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteISTurnValue(string PRODUCTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadISTurnValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadISTurnValue(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetISTurnValue_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetISTurnValue_TEST(string InXml, string Y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetISTurnValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetISTurnValue(string ProductNo, string ModelNo, ref System.Data.DataSet dsISTVList, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISLabelPrint_Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ISLabelPrint_Test(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISLabelPrint", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ISLabelPrint(string Productno, string CIEType, string VersionType, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/get_is_value_Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string get_is_value_Test(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/get_is_value", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool get_is_value(string LotNo, string BarCode, ref System.Data.DataSet DT, ref string date_time, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadSystemParament", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadSystemParament(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOutFunction_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckOutFunction_TEST(string CassetteNo, string EquipmentNo, string OPID, string UserNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckInFunction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckInFunction(string CassetteNo, string EquipmentNo, string OPID, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOutFunction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckOutFunction(string CassetteNo, string EquipmentNo, string OPID, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckInFunction_Cassette_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckInFunction_Cassette_TEST(string CassetteNo, string CassetteNo_Empty, string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOutFunction_Cassette_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckOutFunction_Cassette_TEST(string CassetteNo, string CassetteNo_Empty, string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckInFunction_Cassette", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckInFunction_Cassette(string CassetteNo, string CassetteNo_Empty, string EquipmentNo, string OPID, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOutFunction_Cassette", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckOutFunction_Cassette(string CassetteNo, string EquipmentNo, string OPID, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOutFunction_DB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckOutFunction_DB(string CassetteNo, string EquipmentNo, string OPID, string strError, string LotRecord, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOutFunction_GL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckOutFunction_GL(string CassetteNo, string EquipmentNo, string OPID, string strError, string LotRecord, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadProduct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int LoadProduct(ref string ProductNo, ref string ProductVersion, ref System.Data.DataSet dsReturn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadOPPropertyJson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadOPPropertyJson(string userNo, string opNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadCarrierBasis", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LoadCarrierBasis(string CST_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GET_MOMATERIAL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GET_MOMATERIAL(string MONo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GET_RECIPE_NAME_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GET_RECIPE_NAME_TEST(string X, string Y, string V);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GET_RECIPE_NAME", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GET_RECIPE_NAME(string LOTNO, string RECIPE_TYPE, string VendorNo, ref string RECIPE_NAME, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotLogon_EQP_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LotLogon_EQP_TEST(string REELID, string EquipmentNo, string UserNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotLogon_EQP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LotLogon_EQP(string REELID, string EquipmentNo, string OPNo, string UserNo, string TRY_COUNT, ref System.Data.DataSet dsLogon, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotLogoff_EQP_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LotLogoff_EQP_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotLogoff_EQP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LotLogoff_EQP(string REELID, string EquipmentNo, string OPNo, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotLogon_Cancel_EQP_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LotLogon_Cancel_EQP_TEST(string LotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotLogon_Cancel_EQP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LotLogon_Cancel_EQP(string REELID, string EquipmentNo, string OPNo, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPNList_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPNList_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPNList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetPNList(ref System.Data.DataSet dsPNLIST, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShipID_Use_Record_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ShipID_Use_Record_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShipID_Use_Record", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ShipID_Use_Record(string ShipID, string Equipmentno, string UserNo, ref System.Data.DataSet dsShipIDUse, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotWaitSet_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LotWaitSet_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotWaitSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LotWaitSet(string LotNo, string Equipmentno, string UserNo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GETLotInfo_Sorter_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GETLotInfo_Sorter_TEST(string InXml, string CarrierNo, string EquipmentNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GETLotInfo_Sorter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GETLotInfo_Sorter(string LotNo, string OPNo, string EquipmentNo, string UserNo, ref System.Data.DataSet dsSorterLotnoInfo, ref string MSG, string CarrierNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetShipIDInfo_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetShipIDInfo_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetShipIDInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetShipIDInfo(string ShipID, string VendorNo, ref System.Data.DataSet dsShipIDInfo, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBagInfo_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBagInfo_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBagInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GetBagInfo(string ShipID, ref System.Data.DataSet dsBag, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadCIEXYTarget_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadCIEXYTarget_TEST(string InXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadCIEXYTarget", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LoadCIEXYTarget(string LotNo, ref System.Data.DataSet dsCIE, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadMachState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadMachState(string EquipmentNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadBatchMachState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadBatchMachState(ref System.Data.DataTable dtEquipmentState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/changeMachState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool changeMachState(string ChangeStateName, string EquipmentNo, string UserNo, string ReasonNo, string description, ref string MSG);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Login(string UserNo, string PassWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckDBConnection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CheckDBConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetlotBasInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetlotBasInfo(string LotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetlotBasInfo_MESBOM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetlotBasInfo_MESBOM(string LotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetMgzNedChkOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetMgzNedChkOut(string EquipmentNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login_rtname", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Login_rtname(string UserNo, string PassWord, ref string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login_chkGroup_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Login_chkGroup_TEST(string UserNo, string PassWord, string Group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login_chkGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Login_chkGroup(string UserNo, string PassWord, string Group, ref string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetSfcidMach", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetSfcidMach(string EQPType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetT_HINCD_BAS_INFO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetT_HINCD_BAS_INFO(string ProductNo, string ParameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetRecipeParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetRecipeParameter(string ProductNo, string ParameterName, string OPNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetNeedCntDwnMgz", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetNeedCntDwnMgz(string EQPNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetNeedCntDwnMgz_ALL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetNeedCntDwnMgz_ALL(string EQPNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetMTL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetMTL(string MTL_KEY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCSTInfo_ByLotno_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCSTInfo_ByLotno_TEST(string LotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCSTInfo_ByLotno", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCSTInfo_ByLotno(string LotNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCSTInfo_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCSTInfo_TEST(string CasetteNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCSTInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCSTInfo(string CasetteNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetPGM_TASK", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetPGM_TASK(string MONO, string LOTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetPGM_TASK_ByRID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetPGM_TASK_ByRID(string RID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnGetPGM_TASK_ByRIDStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnGetPGM_TASK_ByRIDStatus(string RID, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadGlueLife", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadGlueLife(string PRODUCTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadFormula", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadFormula(string PRODUCTNO, string LF_VENDOR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadFormula_config", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadFormula_config(string PRODUCTNO, string LF_VENDOR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadinjection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadinjection(string LOTNO_ON, string MACH_ID, string BARCODE_ID, string LOTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Editinjection_t1_end_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Editinjection_t1_end_TEST(string RID, double addtime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Editinjection_t1_end", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Editinjection_t1_end(string RID, string used_time_t1_e, string used_t2, string used_time_t2_s, double lifetime_t2, string EQUIPMENTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Editinjection_t1_end_STR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Editinjection_t1_end_STR(string RID, string used_time_t1_e, string used_t2, string used_time_t2_s, double lifetime_t2, string EQUIPMENTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Editinjection_t2_end_TEST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Editinjection_t2_end_TEST(string RID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Editinjection_t2_end", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Editinjection_t2_end(string RID, string used_time_t2_e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Editinjection_t2_end_STR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Editinjection_t2_end_STR(string RID, string used_time_t2_e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadinjection_history_t2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadinjection_history_t2(string ORG_LOTNO, string LOTNO, string EQUIPMENTNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Addinjection_history_t2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Addinjection_history_t2(string ORG_LOTNO, string LOTNO, string BARCODE_ID, string EQUIPMENTNO, string FOLLOWED_REASON, string CREATEDATE, string CREATOR, string GROUP_KEY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fnLoadEQPPRSTATE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet fnLoadEQPPRSTATE(string CARRIERNO, string EQPNO_PR, string LOTNO, string STATE, string AddSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEQPPRSTATE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddEQPPRSTATE(string CARRIERNO, string EQPNO_PR, string EQPNO_GL, string PRODUCTNO, string LOTNO, string CREATOR, string STATE, string HZ, string RUNTIME);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsWPSystemSoapChannel : DB_OPI.wsAuto.wsWPSystemSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsWPSystemSoapClient : System.ServiceModel.ClientBase<DB_OPI.wsAuto.wsWPSystemSoap>, DB_OPI.wsAuto.wsWPSystemSoap {
        
        public wsWPSystemSoapClient() {
        }
        
        public wsWPSystemSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wsWPSystemSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsWPSystemSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsWPSystemSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string IsertMSMQMessage(string InXml) {
            return base.Channel.IsertMSMQMessage(InXml);
        }
        
        public string Dino_Test(string InXml) {
            return base.Channel.Dino_Test(InXml);
        }
        
        public string LoadEquipmentBlueTape_DBOPI(string InXml) {
            return base.Channel.LoadEquipmentBlueTape_DBOPI(InXml);
        }
        
        public string LoadEquipmentState_DBOPI(string InXml) {
            return base.Channel.LoadEquipmentState_DBOPI(InXml);
        }
        
        public string LoadLotState_DBOPI(string InXml) {
            return base.Channel.LoadLotState_DBOPI(InXml);
        }
        
        public string Exe_EQPMaterialState_TurnInv(string InXml) {
            return base.Channel.Exe_EQPMaterialState_TurnInv(InXml);
        }
        
        public bool GET_RECIPE_NAME_DBWB(string LOTNO, string RECIPE_TYPE, ref string RECIPE_NAME, ref string MSG) {
            return base.Channel.GET_RECIPE_NAME_DBWB(LOTNO, RECIPE_TYPE, ref RECIPE_NAME, ref MSG);
        }
        
        public bool GET_WB_RECIPE_PATH(string EQPID, ref string RECIPE_PATH, ref string MSG) {
            return base.Channel.GET_WB_RECIPE_PATH(EQPID, ref RECIPE_PATH, ref MSG);
        }
        
        public string AddTCS_ErrorLog(string EQPID, string AlarmID, string Description) {
            return base.Channel.AddTCS_ErrorLog(EQPID, AlarmID, Description);
        }
        
        public string LoadDownloadRecipeEQP() {
            return base.Channel.LoadDownloadRecipeEQP();
        }
        
        public bool InsertSPC_Interface(string strXML) {
            return base.Channel.InsertSPC_Interface(strXML);
        }
        
        public string LoadPlasmaPriorityforWB(string InXML) {
            return base.Channel.LoadPlasmaPriorityforWB(InXML);
        }
        
        public object mail_test(string MailSubject, string Message, string MailGroup) {
            return base.Channel.mail_test(MailSubject, Message, MailGroup);
        }
        
        public string LoadApConfig(string userNo, string apName, string apID) {
            return base.Channel.LoadApConfig(userNo, apName, apID);
        }
        
        public string DeleteApConfigByKeyValue(string userNo, string apName, string key, string value) {
            return base.Channel.DeleteApConfigByKeyValue(userNo, apName, key, value);
        }
        
        public string LoadApConfigByKeyValue(string userNo, string apName, string key, string value) {
            return base.Channel.LoadApConfigByKeyValue(userNo, apName, key, value);
        }
        
        public string InsertApConfig_Test(string userNo, string apName, string apID) {
            return base.Channel.InsertApConfig_Test(userNo, apName, apID);
        }
        
        public string InsertApConfig(string userNo, string apName, string apID, string[] configKeys, string[] configValues) {
            return base.Channel.InsertApConfig(userNo, apName, apID, configKeys, configValues);
        }
        
        public string LoadMaterialRecordJson(string userNo, string eqpNo) {
            return base.Channel.LoadMaterialRecordJson(userNo, eqpNo);
        }
        
        public string Add_Material_Record(string InXml) {
            return base.Channel.Add_Material_Record(InXml);
        }
        
        public string QueryMMSettingData(string userNo, string prodNo) {
            return base.Channel.QueryMMSettingData(userNo, prodNo);
        }
        
        public string QueryPreTestPotID(string userNo, string glEqpNo, string lotNo) {
            return base.Channel.QueryPreTestPotID(userNo, glEqpNo, lotNo);
        }
        
        public string QueryPreTestData(string userNo, string potID, string glEqpNo) {
            return base.Channel.QueryPreTestData(userNo, potID, glEqpNo);
        }
        
        public string MaterialLogoff(string userNo, string eqpNo, string matLotNo, string logonStTimeStr, string logonEndTimeStr) {
            return base.Channel.MaterialLogoff(userNo, eqpNo, matLotNo, logonStTimeStr, logonEndTimeStr);
        }
        
        public bool EditEQPPRSTATE(string W_CARRIERNO, string W_CARRIERNO_PR, string W_LOTNO, string W_STATE, string S_CARRIERNO_PR, string S_COLOR, string S_STARTTIME_STR, string S_IN_P_TIME_STR, string S_OUT_P_TIME_STR, string S_IN_C_TIME_STR, string S_OUT_C_TIME_STR, int S_FLAG_I, int S_FLAG_O, string S_ENDTIME_STR, string S_STATE) {
            return base.Channel.EditEQPPRSTATE(W_CARRIERNO, W_CARRIERNO_PR, W_LOTNO, W_STATE, S_CARRIERNO_PR, S_COLOR, S_STARTTIME_STR, S_IN_P_TIME_STR, S_OUT_P_TIME_STR, S_IN_C_TIME_STR, S_OUT_C_TIME_STR, S_FLAG_I, S_FLAG_O, S_ENDTIME_STR, S_STATE);
        }
        
        public bool DelEQPPRSTATE(string EQUIPMENTNO, string CARRIERNO) {
            return base.Channel.DelEQPPRSTATE(EQUIPMENTNO, CARRIERNO);
        }
        
        public System.Data.DataSet fnLoadOPIEQPBASIS(string EQUIPMENTNO, string SERVER_IP, string COMPORTTYPE, string AddSQL) {
            return base.Channel.fnLoadOPIEQPBASIS(EQUIPMENTNO, SERVER_IP, COMPORTTYPE, AddSQL);
        }
        
        public bool AddOPIEQPBASIS(
                    string EQUIPMENTNO, 
                    string CLIENT_IP, 
                    string COMPORT, 
                    string BAUDRATE, 
                    string DATABIT, 
                    string STOPBIT, 
                    string PARITY, 
                    string COMPORTTYPE, 
                    string IO_CHANEL, 
                    string MSMQ, 
                    string MSMQ_FACT, 
                    string RECIPE, 
                    string HOST_IP, 
                    string HOSTNAME, 
                    string HOSTPORT, 
                    string ALARMHOST, 
                    string CLIENT_PORT, 
                    string SERVER_IP, 
                    string SERVER_PORT) {
            return base.Channel.AddOPIEQPBASIS(EQUIPMENTNO, CLIENT_IP, COMPORT, BAUDRATE, DATABIT, STOPBIT, PARITY, COMPORTTYPE, IO_CHANEL, MSMQ, MSMQ_FACT, RECIPE, HOST_IP, HOSTNAME, HOSTPORT, ALARMHOST, CLIENT_PORT, SERVER_IP, SERVER_PORT);
        }
        
        public bool DelOPIEQPBASIS(string EQUIPMENTNO, string SERVER_IP, string COMPORTTYPE, string AddSQL) {
            return base.Channel.DelOPIEQPBASIS(EQUIPMENTNO, SERVER_IP, COMPORTTYPE, AddSQL);
        }
        
        public System.Data.DataSet GETPRCarrierState(string CarrierNo) {
            return base.Channel.GETPRCarrierState(CarrierNo);
        }
        
        public bool EditPRCarrierState(string CARRIERNO, string LOTNO, string CARRIERSTATE, string UserNo) {
            return base.Channel.EditPRCarrierState(CARRIERNO, LOTNO, CARRIERSTATE, UserNo);
        }
        
        public bool AddEventLog(string ServiceName, string UserNo, string KEYFIELD, string KEYVALUE, string DESCRIPTION, string ComputerName) {
            return base.Channel.AddEventLog(ServiceName, UserNo, KEYFIELD, KEYVALUE, DESCRIPTION, ComputerName);
        }
        
        public System.Data.DataSet fnLoadGLUEQUANTITY(string LOTNO, string MONO, string EQUIPMENTNO, string AddSQL) {
            return base.Channel.fnLoadGLUEQUANTITY(LOTNO, MONO, EQUIPMENTNO, AddSQL);
        }
        
        public bool AddGLUEQUANTITY(
                    string STATUS, 
                    string MONO, 
                    string PRODUCTNO, 
                    string PRODUCTTYPE, 
                    string LOTNO, 
                    string EQUIPMENTNO, 
                    string PHOSPHOR_A_NAME, 
                    string PHOSPHOR_A_PERCENT, 
                    string PHOSPHOR_B_NAME, 
                    string PHOSPHOR_B_PERCENT, 
                    string VALUE1, 
                    string VALUE2, 
                    string VALUE3, 
                    string BLANKWEIGHT1, 
                    string BLANKWEIGHT2, 
                    string BLANKWEIGHT3, 
                    string BLANKWEIGHT4, 
                    string BLANKWEIGHT5, 
                    string BLANKWEIGHT6, 
                    string TOTALWEIGHT1, 
                    string TOTALWEIGHT2, 
                    string TOTALWEIGHT3, 
                    string TOTALWEIGHT4, 
                    string TOTALWEIGHT5, 
                    string TOTALWEIGHT6, 
                    string SECONDS1, 
                    string SECONDS2, 
                    string SECONDS3, 
                    string SECONDS4, 
                    string SECONDS5, 
                    string SECONDS6, 
                    string CREATOR, 
                    string GLUEP_PERCENT, 
                    string CHANGE_POWDERRATIO) {
            return base.Channel.AddGLUEQUANTITY(STATUS, MONO, PRODUCTNO, PRODUCTTYPE, LOTNO, EQUIPMENTNO, PHOSPHOR_A_NAME, PHOSPHOR_A_PERCENT, PHOSPHOR_B_NAME, PHOSPHOR_B_PERCENT, VALUE1, VALUE2, VALUE3, BLANKWEIGHT1, BLANKWEIGHT2, BLANKWEIGHT3, BLANKWEIGHT4, BLANKWEIGHT5, BLANKWEIGHT6, TOTALWEIGHT1, TOTALWEIGHT2, TOTALWEIGHT3, TOTALWEIGHT4, TOTALWEIGHT5, TOTALWEIGHT6, SECONDS1, SECONDS2, SECONDS3, SECONDS4, SECONDS5, SECONDS6, CREATOR, GLUEP_PERCENT, CHANGE_POWDERRATIO);
        }
        
        public bool DelGLUEQUANTITY(string LOTNO, string MONO, string AddSQL) {
            return base.Channel.DelGLUEQUANTITY(LOTNO, MONO, AddSQL);
        }
        
        public bool EditGLUEQUANTITY(
                    string W_LOTNO, 
                    string W_MONO, 
                    string W_AddSQL, 
                    string STATUS, 
                    string MONO, 
                    string PRODUCTNO, 
                    string PRODUCTTYPE, 
                    string LOTNO, 
                    string EQUIPMENTNO, 
                    string PHOSPHOR_A_NAME, 
                    string PHOSPHOR_A_PERCENT, 
                    string PHOSPHOR_B_NAME, 
                    string PHOSPHOR_B_PERCENT, 
                    string VALUE1, 
                    string VALUE2, 
                    string VALUE3, 
                    string BLANKWEIGHT1, 
                    string BLANKWEIGHT2, 
                    string BLANKWEIGHT3, 
                    string BLANKWEIGHT4, 
                    string BLANKWEIGHT5, 
                    string BLANKWEIGHT6, 
                    string TOTALWEIGHT1, 
                    string TOTALWEIGHT2, 
                    string TOTALWEIGHT3, 
                    string TOTALWEIGHT4, 
                    string TOTALWEIGHT5, 
                    string TOTALWEIGHT6, 
                    string SECONDS1, 
                    string SECONDS2, 
                    string SECONDS3, 
                    string SECONDS4, 
                    string SECONDS5, 
                    string SECONDS6, 
                    string CREATOR, 
                    string GLUEP_PERCENT, 
                    string CHANGE_POWDERRATIO) {
            return base.Channel.EditGLUEQUANTITY(W_LOTNO, W_MONO, W_AddSQL, STATUS, MONO, PRODUCTNO, PRODUCTTYPE, LOTNO, EQUIPMENTNO, PHOSPHOR_A_NAME, PHOSPHOR_A_PERCENT, PHOSPHOR_B_NAME, PHOSPHOR_B_PERCENT, VALUE1, VALUE2, VALUE3, BLANKWEIGHT1, BLANKWEIGHT2, BLANKWEIGHT3, BLANKWEIGHT4, BLANKWEIGHT5, BLANKWEIGHT6, TOTALWEIGHT1, TOTALWEIGHT2, TOTALWEIGHT3, TOTALWEIGHT4, TOTALWEIGHT5, TOTALWEIGHT6, SECONDS1, SECONDS2, SECONDS3, SECONDS4, SECONDS5, SECONDS6, CREATOR, GLUEP_PERCENT, CHANGE_POWDERRATIO);
        }
        
        public System.Data.DataSet fnLoadE_SCALELOG(string RID, string MONO, string EQUIPMENTNO, string AddSQL) {
            return base.Channel.fnLoadE_SCALELOG(RID, MONO, EQUIPMENTNO, AddSQL);
        }
        
        public bool AddE_SCALELOG(
                    string STATUS, 
                    string RID, 
                    string MONO, 
                    string PRODUCTNO, 
                    string EQUIPMENTNO, 
                    string TARGETWEIGHT, 
                    string TARGETWEIGHTMAX, 
                    string TARGETWEIGHTMIN, 
                    string CREATOR, 
                    string RECORD1, 
                    string RECORD2, 
                    string RECORD3, 
                    string RECORD4, 
                    string RECORD5, 
                    string RECORD6, 
                    string RECORD7, 
                    string RECORD8) {
            return base.Channel.AddE_SCALELOG(STATUS, RID, MONO, PRODUCTNO, EQUIPMENTNO, TARGETWEIGHT, TARGETWEIGHTMAX, TARGETWEIGHTMIN, CREATOR, RECORD1, RECORD2, RECORD3, RECORD4, RECORD5, RECORD6, RECORD7, RECORD8);
        }
        
        public bool DelE_SCALELOG(string RID, string AddSQL) {
            return base.Channel.DelE_SCALELOG(RID, AddSQL);
        }
        
        public bool EditE_SCALELOG(
                    string RID, 
                    string STATUS, 
                    string MONO, 
                    string PRODUCTNO, 
                    string EQUIPMENTNO, 
                    string TARGETWEIGHT, 
                    string TARGETWEIGHTMAX, 
                    string TARGETWEIGHTMIN, 
                    string RECORD1, 
                    string RECORD2, 
                    string RECORD3, 
                    string RECORD4, 
                    string RECORD5, 
                    string RECORD6, 
                    string RECORD7, 
                    string RECORD8, 
                    string W_AddSQL) {
            return base.Channel.EditE_SCALELOG(RID, STATUS, MONO, PRODUCTNO, EQUIPMENTNO, TARGETWEIGHT, TARGETWEIGHTMAX, TARGETWEIGHTMIN, RECORD1, RECORD2, RECORD3, RECORD4, RECORD5, RECORD6, RECORD7, RECORD8, W_AddSQL);
        }
        
        public string CheckCarrierJoinLotState_TEST(string CarrierNoList, string Flag) {
            return base.Channel.CheckCarrierJoinLotState_TEST(CarrierNoList, Flag);
        }
        
        public System.Data.DataSet CheckCarrierJoinLotState(string CarrierNoList, string Flag) {
            return base.Channel.CheckCarrierJoinLotState(CarrierNoList, Flag);
        }
        
        public System.Data.DataSet LoadLFWEIGHT(string LOTNO, string MONO, string AddSQL) {
            return base.Channel.LoadLFWEIGHT(LOTNO, MONO, AddSQL);
        }
        
        public bool AddLFWEIGHT(string MONO, string LOTNO, string NO, string BEFORE, string AFTER, string LACK, string AVERAGEWEIGHT, string RESULT, string TARGETWEIGHT, string RID) {
            return base.Channel.AddLFWEIGHT(MONO, LOTNO, NO, BEFORE, AFTER, LACK, AVERAGEWEIGHT, RESULT, TARGETWEIGHT, RID);
        }
        
        public bool DelLFWEIGHT(string LOTNO, string MONO, string AddSQL) {
            return base.Channel.DelLFWEIGHT(LOTNO, MONO, AddSQL);
        }
        
        public bool EditLFWEIGHT(string LOTNO, string MONO, string NO, string BEFORE, string AFTER, string LACK, string AVERAGEWEIGHT, string RESULT, string TARGETWEIGHT, string RID, string W_AddSQL) {
            return base.Channel.EditLFWEIGHT(LOTNO, MONO, NO, BEFORE, AFTER, LACK, AVERAGEWEIGHT, RESULT, TARGETWEIGHT, RID, W_AddSQL);
        }
        
        public int LoadLFQTY(string MONO, string LOTNO, string CarrierNo) {
            return base.Channel.LoadLFQTY(MONO, LOTNO, CarrierNo);
        }
        
        public System.Data.DataSet LoadRecipeConfig(string PRODUCTNO, string RECIPEID, string ACTIVE, string AddSQL) {
            return base.Channel.LoadRecipeConfig(PRODUCTNO, RECIPEID, ACTIVE, AddSQL);
        }
        
        public string GetRecipeID_DSP(string RID, string LOTNO, string AddSQL) {
            return base.Channel.GetRecipeID_DSP(RID, LOTNO, AddSQL);
        }
        
        public string LoadDSP_PARAMETER_LotNo_TEST(string LOTNO, string CarrierNo) {
            return base.Channel.LoadDSP_PARAMETER_LotNo_TEST(LOTNO, CarrierNo);
        }
        
        public bool LoadDSP_PARAMETER_LotNo(string LotNo, ref System.Data.DataSet dsReturn, ref string MSG) {
            return base.Channel.LoadDSP_PARAMETER_LotNo(LotNo, ref dsReturn, ref MSG);
        }
        
        public System.Data.DataSet LoadPretestParameter(string LOTNO, string AddSQL) {
            return base.Channel.LoadPretestParameter(LOTNO, AddSQL);
        }
        
        public System.Data.DataSet LoadPretestData(string RID, string MONO, string LOTNO, string PRODUCTNO, string STATUS, string AddSQL) {
            return base.Channel.LoadPretestData(RID, MONO, LOTNO, PRODUCTNO, STATUS, AddSQL);
        }
        
        public bool AddPretestData(
                    string STATUS, 
                    string RID, 
                    string MONO, 
                    string PRODUCTNO, 
                    string LOTNO, 
                    string CIE_AVG, 
                    string CIE_STD, 
                    string NEEDLE1_AVG, 
                    string NEEDLE1_STD, 
                    string NEEDLE1_BEFORE, 
                    string NEEDLE1_AFTER, 
                    string NEEDLE1_PROPORTION, 
                    string NEEDLE2_AVG, 
                    string NEEDLE2_STD, 
                    string NEEDLE2_BEFORE, 
                    string NEEDLE2_AFTER, 
                    string NEEDLE2_PROPORTION, 
                    string NEEDLE3_AVG, 
                    string NEEDLE3_STD, 
                    string NEEDLE3_BEFORE, 
                    string NEEDLE3_AFTER, 
                    string NEEDLE3_PROPORTION, 
                    string NEEDLE4_AVG, 
                    string NEEDLE4_STD, 
                    string NEEDLE4_BEFORE, 
                    string NEEDLE4_AFTER, 
                    string NEEDLE4_PROPORTION, 
                    string NEEDLE5_AVG, 
                    string NEEDLE5_STD, 
                    string NEEDLE5_BEFORE, 
                    string NEEDLE5_AFTER, 
                    string NEEDLE5_PROPORTION, 
                    string NEEDLE6_AVG, 
                    string NEEDLE6_STD, 
                    string NEEDLE6_BEFORE, 
                    string NEEDLE6_AFTER, 
                    string NEEDLE6_PROPORTION, 
                    string NEEDLE7_AVG, 
                    string NEEDLE7_STD, 
                    string NEEDLE7_BEFORE, 
                    string NEEDLE7_AFTER, 
                    string NEEDLE7_PROPORTION, 
                    string NEEDLE8_AVG, 
                    string NEEDLE8_STD, 
                    string NEEDLE8_BEFORE, 
                    string NEEDLE8_AFTER, 
                    string NEEDLE8_PROPORTION, 
                    string ALARM, 
                    string EQUIPMENTNO) {
            return base.Channel.AddPretestData(STATUS, RID, MONO, PRODUCTNO, LOTNO, CIE_AVG, CIE_STD, NEEDLE1_AVG, NEEDLE1_STD, NEEDLE1_BEFORE, NEEDLE1_AFTER, NEEDLE1_PROPORTION, NEEDLE2_AVG, NEEDLE2_STD, NEEDLE2_BEFORE, NEEDLE2_AFTER, NEEDLE2_PROPORTION, NEEDLE3_AVG, NEEDLE3_STD, NEEDLE3_BEFORE, NEEDLE3_AFTER, NEEDLE3_PROPORTION, NEEDLE4_AVG, NEEDLE4_STD, NEEDLE4_BEFORE, NEEDLE4_AFTER, NEEDLE4_PROPORTION, NEEDLE5_AVG, NEEDLE5_STD, NEEDLE5_BEFORE, NEEDLE5_AFTER, NEEDLE5_PROPORTION, NEEDLE6_AVG, NEEDLE6_STD, NEEDLE6_BEFORE, NEEDLE6_AFTER, NEEDLE6_PROPORTION, NEEDLE7_AVG, NEEDLE7_STD, NEEDLE7_BEFORE, NEEDLE7_AFTER, NEEDLE7_PROPORTION, NEEDLE8_AVG, NEEDLE8_STD, NEEDLE8_BEFORE, NEEDLE8_AFTER, NEEDLE8_PROPORTION, ALARM, EQUIPMENTNO);
        }
        
        public bool AddPretestData_XY(
                    string STATUS, 
                    string RID, 
                    string MONO, 
                    string PRODUCTNO, 
                    string LOTNO, 
                    string CIE_AVG, 
                    string CIE_STD, 
                    string NEEDLE1_AVG, 
                    string NEEDLE1_STD, 
                    string NEEDLE1_BEFORE, 
                    string NEEDLE1_AFTER, 
                    string NEEDLE1_PROPORTION, 
                    string NEEDLE2_AVG, 
                    string NEEDLE2_STD, 
                    string NEEDLE2_BEFORE, 
                    string NEEDLE2_AFTER, 
                    string NEEDLE2_PROPORTION, 
                    string NEEDLE3_AVG, 
                    string NEEDLE3_STD, 
                    string NEEDLE3_BEFORE, 
                    string NEEDLE3_AFTER, 
                    string NEEDLE3_PROPORTION, 
                    string NEEDLE4_AVG, 
                    string NEEDLE4_STD, 
                    string NEEDLE4_BEFORE, 
                    string NEEDLE4_AFTER, 
                    string NEEDLE4_PROPORTION, 
                    string NEEDLE5_AVG, 
                    string NEEDLE5_STD, 
                    string NEEDLE5_BEFORE, 
                    string NEEDLE5_AFTER, 
                    string NEEDLE5_PROPORTION, 
                    string NEEDLE6_AVG, 
                    string NEEDLE6_STD, 
                    string NEEDLE6_BEFORE, 
                    string NEEDLE6_AFTER, 
                    string NEEDLE6_PROPORTION, 
                    string NEEDLE7_AVG, 
                    string NEEDLE7_STD, 
                    string NEEDLE7_BEFORE, 
                    string NEEDLE7_AFTER, 
                    string NEEDLE7_PROPORTION, 
                    string NEEDLE8_AVG, 
                    string NEEDLE8_STD, 
                    string NEEDLE8_BEFORE, 
                    string NEEDLE8_AFTER, 
                    string NEEDLE8_PROPORTION, 
                    string ALARM, 
                    string EQUIPMENTNO, 
                    string CIE_TYPE) {
            return base.Channel.AddPretestData_XY(STATUS, RID, MONO, PRODUCTNO, LOTNO, CIE_AVG, CIE_STD, NEEDLE1_AVG, NEEDLE1_STD, NEEDLE1_BEFORE, NEEDLE1_AFTER, NEEDLE1_PROPORTION, NEEDLE2_AVG, NEEDLE2_STD, NEEDLE2_BEFORE, NEEDLE2_AFTER, NEEDLE2_PROPORTION, NEEDLE3_AVG, NEEDLE3_STD, NEEDLE3_BEFORE, NEEDLE3_AFTER, NEEDLE3_PROPORTION, NEEDLE4_AVG, NEEDLE4_STD, NEEDLE4_BEFORE, NEEDLE4_AFTER, NEEDLE4_PROPORTION, NEEDLE5_AVG, NEEDLE5_STD, NEEDLE5_BEFORE, NEEDLE5_AFTER, NEEDLE5_PROPORTION, NEEDLE6_AVG, NEEDLE6_STD, NEEDLE6_BEFORE, NEEDLE6_AFTER, NEEDLE6_PROPORTION, NEEDLE7_AVG, NEEDLE7_STD, NEEDLE7_BEFORE, NEEDLE7_AFTER, NEEDLE7_PROPORTION, NEEDLE8_AVG, NEEDLE8_STD, NEEDLE8_BEFORE, NEEDLE8_AFTER, NEEDLE8_PROPORTION, ALARM, EQUIPMENTNO, CIE_TYPE);
        }
        
        public bool DelPretestData(string LOTNO, string AddSQL) {
            return base.Channel.DelPretestData(LOTNO, AddSQL);
        }
        
        public bool EditPretestData(string LOTNO, string STATUS, string ALARM, string W_AddSQL) {
            return base.Channel.EditPretestData(LOTNO, STATUS, ALARM, W_AddSQL);
        }
        
        public string AddPretestRawData(string InXml) {
            return base.Channel.AddPretestRawData(InXml);
        }
        
        public string AddPretestRawHeader(string InXml) {
            return base.Channel.AddPretestRawHeader(InXml);
        }
        
        public string AddPretestRawHeader_XY(string InXml) {
            return base.Channel.AddPretestRawHeader_XY(InXml);
        }
        
        public bool LoadSysParameter_PreTest(string PARAMETERTYPE, string PARAMETERNO, string AddSQL) {
            return base.Channel.LoadSysParameter_PreTest(PARAMETERTYPE, PARAMETERNO, AddSQL);
        }
        
        public string LoadSysParameter_ReturnValue(string PARAMETERTYPE, string PARAMETERNO, string AddSQL) {
            return base.Channel.LoadSysParameter_ReturnValue(PARAMETERTYPE, PARAMETERNO, AddSQL);
        }
        
        public string Calc_Front_RawData(string QQ, string DP_TAB_HEADER, string DP_TAB_DATA, string AddSQL) {
            return base.Channel.Calc_Front_RawData(QQ, DP_TAB_HEADER, DP_TAB_DATA, AddSQL);
        }
        
        public System.Data.DataSet LoadSysParameter(string PARAMETERTYPE, string PARAMETERNO, string AddSQL) {
            return base.Channel.LoadSysParameter(PARAMETERTYPE, PARAMETERNO, AddSQL);
        }
        
        public string fnLoadinjection_ReturnEQPNO(string RID, string LOTNO) {
            return base.Channel.fnLoadinjection_ReturnEQPNO(RID, LOTNO);
        }
        
        public bool AddPKGMDPSysEventLog(string USERID, string SERVICENAME, string DESCRIPTION, string KEYFIELD, string KEYVALUE, string COMPUTERNAME) {
            return base.Channel.AddPKGMDPSysEventLog(USERID, SERVICENAME, DESCRIPTION, KEYFIELD, KEYVALUE, COMPUTERNAME);
        }
        
        public bool AddPKGMDPLabelQueue(string KEYVALUE, string LABELFORMAT, string PRINTER, string PARAMETER, string MEMO, string PRINTCOUNT, string STATUS, string NUMBEROFCOPIES, string PRINTORDER) {
            return base.Channel.AddPKGMDPLabelQueue(KEYVALUE, LABELFORMAT, PRINTER, PARAMETER, MEMO, PRINTCOUNT, STATUS, NUMBEROFCOPIES, PRINTORDER);
        }
        
        public bool AddPKGMDPLabelQueue_MMS(string KEYVALUE, string LABELFORMAT, string PRINTER, string PARAMETER, string MEMO, string PRINTCOUNT, string STATUS, string NUMBEROFCOPIES, string PRINTORDER) {
            return base.Channel.AddPKGMDPLabelQueue_MMS(KEYVALUE, LABELFORMAT, PRINTER, PARAMETER, MEMO, PRINTCOUNT, STATUS, NUMBEROFCOPIES, PRINTORDER);
        }
        
        public System.Data.DataSet LoadErrorNo(string OPNO) {
            return base.Channel.LoadErrorNo(OPNO);
        }
        
        public System.Data.DataSet ShowEQPACCStateJoinBasis(string EQPNO, string EquipmentType, string AccessoryType, string AccessoryNo, string AccessoryVersion, string AddSQL) {
            return base.Channel.ShowEQPACCStateJoinBasis(EQPNO, EquipmentType, AccessoryType, AccessoryNo, AccessoryVersion, AddSQL);
        }
        
        public System.Data.DataSet ShowEQPACCBasisJoinState(string EQPNO, string AccessoryType, string AccessoryNo, string AccessoryVersion, string AddSQL) {
            return base.Channel.ShowEQPACCBasisJoinState(EQPNO, AccessoryType, AccessoryNo, AccessoryVersion, AddSQL);
        }
        
        public System.Data.DataSet LoadDS_Pump(string PUMPNO, string EQUIPMENTNO, string DATECODE, string ACTIVE, string STATUS, string AddSQL) {
            return base.Channel.LoadDS_Pump(PUMPNO, EQUIPMENTNO, DATECODE, ACTIVE, STATUS, AddSQL);
        }
        
        public bool AddDS_Pump(string PUMPNO, string EQUIPMENTNO, string DATECODE, string ACTIVE, string STATUS, string CREATOR, double LifeTime) {
            return base.Channel.AddDS_Pump(PUMPNO, EQUIPMENTNO, DATECODE, ACTIVE, STATUS, CREATOR, LifeTime);
        }
        
        public bool EditDS_Pump(string PUMPNO, string EQUIPMENTNO, string DATECODE, string ACTIVE, string STATUS, string strENDTIME, string strWASHTIME_S, string strWASHTIME_E, string USERID_WASH, string W_AddSQL, string set_DATECODE, string Reason) {
            return base.Channel.EditDS_Pump(PUMPNO, EQUIPMENTNO, DATECODE, ACTIVE, STATUS, strENDTIME, strWASHTIME_S, strWASHTIME_E, USERID_WASH, W_AddSQL, set_DATECODE, Reason);
        }
        
        public bool DelDS_Pump(string DATECODE, string EQUIPMENTNO, string PUMPNO, string AddSQL) {
            return base.Channel.DelDS_Pump(DATECODE, EQUIPMENTNO, PUMPNO, AddSQL);
        }
        
        public System.Data.DataSet LoadDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID, string AddSQL) {
            return base.Channel.LoadDS_Pump_Merge(DATECODE, EQUIPMENTNO, RID, AddSQL);
        }
        
        public bool AddDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID) {
            return base.Channel.AddDS_Pump_Merge(DATECODE, EQUIPMENTNO, RID);
        }
        
        public bool EditDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID, string W_AddSQL) {
            return base.Channel.EditDS_Pump_Merge(DATECODE, EQUIPMENTNO, RID, W_AddSQL);
        }
        
        public bool DelDS_Pump_Merge(string DATECODE, string EQUIPMENTNO, string RID, string AddSQL) {
            return base.Channel.DelDS_Pump_Merge(DATECODE, EQUIPMENTNO, RID, AddSQL);
        }
        
        public bool LoadRID(string RID) {
            return base.Channel.LoadRID(RID);
        }
        
        public System.Data.DataSet LoadRIDList_ByPOTID(string POTID, string AddSQL) {
            return base.Channel.LoadRIDList_ByPOTID(POTID, AddSQL);
        }
        
        public System.Data.DataSet LoadEQPIP_ByLotNo(string LotNo, string AddSQL) {
            return base.Channel.LoadEQPIP_ByLotNo(LotNo, AddSQL);
        }
        
        public string LoadDSP_TASK_JoinRecipe(string InXml) {
            return base.Channel.LoadDSP_TASK_JoinRecipe(InXml);
        }
        
        public System.Data.DataSet GetlotInfo(string LotNo) {
            return base.Channel.GetlotInfo(LotNo);
        }
        
        public string GetlotInfoForExcel(string LotNo) {
            return base.Channel.GetlotInfoForExcel(LotNo);
        }
        
        public string funCheckDateTimeFormat(string InXml) {
            return base.Channel.funCheckDateTimeFormat(InXml);
        }
        
        public string LoadOPIEquipmentBasis(string InXml) {
            return base.Channel.LoadOPIEquipmentBasis(InXml);
        }
        
        public string GetISPNList_TEST(string InXml) {
            return base.Channel.GetISPNList_TEST(InXml);
        }
        
        public bool GetISPNList(string TableName, string Type, ref System.Data.DataSet dsISPNLIST, ref string MSG) {
            return base.Channel.GetISPNList(TableName, Type, ref dsISPNLIST, ref MSG);
        }
        
        public string GetISData_TEST(string InXml) {
            return base.Channel.GetISData_TEST(InXml);
        }
        
        public bool GetISData(string TableName, string StartTime, string EndTime, string ProductNo, string Type, string Group_key, string Color_Type, string Version_Type, int QueryType, ref System.Data.DataSet dsISDataList, ref string MSG) {
            return base.Channel.GetISData(TableName, StartTime, EndTime, ProductNo, Type, Group_key, Color_Type, Version_Type, QueryType, ref dsISDataList, ref MSG);
        }
        
        public string UpdateISData_TEST(string InXml) {
            return base.Channel.UpdateISData_TEST(InXml);
        }
        
        public bool UpdateISData(string TableName, string BarCode, string GroupKey, ref string MSG) {
            return base.Channel.UpdateISData(TableName, BarCode, GroupKey, ref MSG);
        }
        
        public string GenerateGroupKey_TEST(string InXml) {
            return base.Channel.GenerateGroupKey_TEST(InXml);
        }
        
        public string GenerateGroupKey() {
            return base.Channel.GenerateGroupKey();
        }
        
        public string AddISData_TEST(string InXml) {
            return base.Channel.AddISData_TEST(InXml);
        }
        
        public bool AddISData(
                    string ISNO, 
                    string TEST_DATE, 
                    string PRODUCTNO, 
                    string TEST_TYPE, 
                    string TEST_KIND, 
                    string VF1_VALUE, 
                    string VF2_VALUE, 
                    string IF_VALUE, 
                    string LVLM, 
                    string X, 
                    string Y, 
                    string WD_VALUE, 
                    string WP_VALUE, 
                    string W_VALUE, 
                    string CCT_VALUE, 
                    string CRI_VALUE, 
                    string LV_VALUE, 
                    string X_VALUE, 
                    string Y_VALUE, 
                    string VF_VALUE, 
                    string WP_VALUE1, 
                    string FILE_NAME, 
                    string SHEET_NAME, 
                    string STANDARD_KIND, 
                    string STANDARD_VF1_VALUE, 
                    string STANDARD_VF2_VALUE, 
                    string STANDARD_IF_VALUE, 
                    string STANDARD_LVLM, 
                    string STANDARD_X, 
                    string STANDARD_Y, 
                    string STANDARD_WD, 
                    string STANDARD_WP, 
                    string STANDARD_W, 
                    string STANDARD_CCT, 
                    string STANDARD_CRI, 
                    string CREATE_DATE, 
                    string GROUP_KEY, 
                    string COLOR_TYPE, 
                    string BARCODE, 
                    string VERSION_TYPE) {
            return base.Channel.AddISData(ISNO, TEST_DATE, PRODUCTNO, TEST_TYPE, TEST_KIND, VF1_VALUE, VF2_VALUE, IF_VALUE, LVLM, X, Y, WD_VALUE, WP_VALUE, W_VALUE, CCT_VALUE, CRI_VALUE, LV_VALUE, X_VALUE, Y_VALUE, VF_VALUE, WP_VALUE1, FILE_NAME, SHEET_NAME, STANDARD_KIND, STANDARD_VF1_VALUE, STANDARD_VF2_VALUE, STANDARD_IF_VALUE, STANDARD_LVLM, STANDARD_X, STANDARD_Y, STANDARD_WD, STANDARD_WP, STANDARD_W, STANDARD_CCT, STANDARD_CRI, CREATE_DATE, GROUP_KEY, COLOR_TYPE, BARCODE, VERSION_TYPE);
        }
        
        public string AddISSTDData_TEST(string InXml) {
            return base.Channel.AddISSTDData_TEST(InXml);
        }
        
        public bool AddISSTDData(
                    string ISNO, 
                    string TEST_DATE, 
                    string PRODUCTNO, 
                    string TEST_KIND, 
                    string FILE_NAME, 
                    string STANDARD_VF1_VALUE, 
                    string STANDARD_VF2_VALUE, 
                    string STANDARD_IF_VALUE, 
                    string STANDARD_LVLM, 
                    string STANDARD_X, 
                    string STANDARD_Y, 
                    string STANDARD_WD, 
                    string STANDARD_WP, 
                    string STANDARD_W, 
                    string STANDARD_CCT, 
                    string STANDARD_CRI, 
                    string GROUP_KEY, 
                    string COLOR_TYPE, 
                    string VERSION_TYPE) {
            return base.Channel.AddISSTDData(ISNO, TEST_DATE, PRODUCTNO, TEST_KIND, FILE_NAME, STANDARD_VF1_VALUE, STANDARD_VF2_VALUE, STANDARD_IF_VALUE, STANDARD_LVLM, STANDARD_X, STANDARD_Y, STANDARD_WD, STANDARD_WP, STANDARD_W, STANDARD_CCT, STANDARD_CRI, GROUP_KEY, COLOR_TYPE, VERSION_TYPE);
        }
        
        public bool AddISTurnValue(
                    string IS_VALUE, 
                    string ACCESSORYNO, 
                    string ACCESSORYTYPE, 
                    string MODELNO, 
                    string PRODUCTNO, 
                    string USERNO, 
                    string MA, 
                    string CIE_X, 
                    string CIE_Y, 
                    string Z, 
                    string R9, 
                    string VF, 
                    string WD, 
                    string WP, 
                    string CRI, 
                    string CIE_X_2, 
                    string CIE_Y_2, 
                    string Z_2, 
                    string R9_2, 
                    string VF_2, 
                    string WD_2, 
                    string WP_2, 
                    string CRI_2, 
                    string CIE_X_3, 
                    string CIE_Y_3, 
                    string Z_3, 
                    string R9_3, 
                    string VF_3, 
                    string WD_3, 
                    string WP_3, 
                    string CRI_3, 
                    string K, 
                    string IS_SETTING, 
                    string NOTE) {
            return base.Channel.AddISTurnValue(IS_VALUE, ACCESSORYNO, ACCESSORYTYPE, MODELNO, PRODUCTNO, USERNO, MA, CIE_X, CIE_Y, Z, R9, VF, WD, WP, CRI, CIE_X_2, CIE_Y_2, Z_2, R9_2, VF_2, WD_2, WP_2, CRI_2, CIE_X_3, CIE_Y_3, Z_3, R9_3, VF_3, WD_3, WP_3, CRI_3, K, IS_SETTING, NOTE);
        }
        
        public bool DeleteISTurnValue(string PRODUCTNO) {
            return base.Channel.DeleteISTurnValue(PRODUCTNO);
        }
        
        public string LoadISTurnValue(string InXml) {
            return base.Channel.LoadISTurnValue(InXml);
        }
        
        public string GetISTurnValue_TEST(string InXml, string Y) {
            return base.Channel.GetISTurnValue_TEST(InXml, Y);
        }
        
        public bool GetISTurnValue(string ProductNo, string ModelNo, ref System.Data.DataSet dsISTVList, ref string MSG) {
            return base.Channel.GetISTurnValue(ProductNo, ModelNo, ref dsISTVList, ref MSG);
        }
        
        public string ISLabelPrint_Test(string InXml) {
            return base.Channel.ISLabelPrint_Test(InXml);
        }
        
        public bool ISLabelPrint(string Productno, string CIEType, string VersionType, ref string MSG) {
            return base.Channel.ISLabelPrint(Productno, CIEType, VersionType, ref MSG);
        }
        
        public string get_is_value_Test(string InXml) {
            return base.Channel.get_is_value_Test(InXml);
        }
        
        public bool get_is_value(string LotNo, string BarCode, ref System.Data.DataSet DT, ref string date_time, ref string MSG) {
            return base.Channel.get_is_value(LotNo, BarCode, ref DT, ref date_time, ref MSG);
        }
        
        public string LoadSystemParament(string InXml) {
            return base.Channel.LoadSystemParament(InXml);
        }
        
        public string CheckOutFunction_TEST(string CassetteNo, string EquipmentNo, string OPID, string UserNo) {
            return base.Channel.CheckOutFunction_TEST(CassetteNo, EquipmentNo, OPID, UserNo);
        }
        
        public string CheckInFunction(string CassetteNo, string EquipmentNo, string OPID, string UserNo, ref string MSG) {
            return base.Channel.CheckInFunction(CassetteNo, EquipmentNo, OPID, UserNo, ref MSG);
        }
        
        public string CheckOutFunction(string CassetteNo, string EquipmentNo, string OPID, string UserNo, ref string MSG) {
            return base.Channel.CheckOutFunction(CassetteNo, EquipmentNo, OPID, UserNo, ref MSG);
        }
        
        public string CheckInFunction_Cassette_TEST(string CassetteNo, string CassetteNo_Empty, string InXml) {
            return base.Channel.CheckInFunction_Cassette_TEST(CassetteNo, CassetteNo_Empty, InXml);
        }
        
        public string CheckOutFunction_Cassette_TEST(string CassetteNo, string CassetteNo_Empty, string InXml) {
            return base.Channel.CheckOutFunction_Cassette_TEST(CassetteNo, CassetteNo_Empty, InXml);
        }
        
        public string CheckInFunction_Cassette(string CassetteNo, string CassetteNo_Empty, string EquipmentNo, string OPID, string UserNo, ref string MSG) {
            return base.Channel.CheckInFunction_Cassette(CassetteNo, CassetteNo_Empty, EquipmentNo, OPID, UserNo, ref MSG);
        }
        
        public string CheckOutFunction_Cassette(string CassetteNo, string EquipmentNo, string OPID, string UserNo, ref string MSG) {
            return base.Channel.CheckOutFunction_Cassette(CassetteNo, EquipmentNo, OPID, UserNo, ref MSG);
        }
        
        public string CheckOutFunction_DB(string CassetteNo, string EquipmentNo, string OPID, string strError, string LotRecord, string UserNo, ref string MSG) {
            return base.Channel.CheckOutFunction_DB(CassetteNo, EquipmentNo, OPID, strError, LotRecord, UserNo, ref MSG);
        }
        
        public string CheckOutFunction_GL(string CassetteNo, string EquipmentNo, string OPID, string strError, string LotRecord, string UserNo, ref string MSG) {
            return base.Channel.CheckOutFunction_GL(CassetteNo, EquipmentNo, OPID, strError, LotRecord, UserNo, ref MSG);
        }
        
        public int LoadProduct(ref string ProductNo, ref string ProductVersion, ref System.Data.DataSet dsReturn) {
            return base.Channel.LoadProduct(ref ProductNo, ref ProductVersion, ref dsReturn);
        }
        
        public string LoadOPPropertyJson(string userNo, string opNo) {
            return base.Channel.LoadOPPropertyJson(userNo, opNo);
        }
        
        public bool LoadCarrierBasis(string CST_ID) {
            return base.Channel.LoadCarrierBasis(CST_ID);
        }
        
        public System.Data.DataSet GET_MOMATERIAL(string MONo) {
            return base.Channel.GET_MOMATERIAL(MONo);
        }
        
        public string GET_RECIPE_NAME_TEST(string X, string Y, string V) {
            return base.Channel.GET_RECIPE_NAME_TEST(X, Y, V);
        }
        
        public bool GET_RECIPE_NAME(string LOTNO, string RECIPE_TYPE, string VendorNo, ref string RECIPE_NAME, ref string MSG) {
            return base.Channel.GET_RECIPE_NAME(LOTNO, RECIPE_TYPE, VendorNo, ref RECIPE_NAME, ref MSG);
        }
        
        public string LotLogon_EQP_TEST(string REELID, string EquipmentNo, string UserNo) {
            return base.Channel.LotLogon_EQP_TEST(REELID, EquipmentNo, UserNo);
        }
        
        public bool LotLogon_EQP(string REELID, string EquipmentNo, string OPNo, string UserNo, string TRY_COUNT, ref System.Data.DataSet dsLogon, ref string MSG) {
            return base.Channel.LotLogon_EQP(REELID, EquipmentNo, OPNo, UserNo, TRY_COUNT, ref dsLogon, ref MSG);
        }
        
        public string LotLogoff_EQP_TEST(string InXml) {
            return base.Channel.LotLogoff_EQP_TEST(InXml);
        }
        
        public bool LotLogoff_EQP(string REELID, string EquipmentNo, string OPNo, string UserNo, ref string MSG) {
            return base.Channel.LotLogoff_EQP(REELID, EquipmentNo, OPNo, UserNo, ref MSG);
        }
        
        public string LotLogon_Cancel_EQP_TEST(string LotNo) {
            return base.Channel.LotLogon_Cancel_EQP_TEST(LotNo);
        }
        
        public bool LotLogon_Cancel_EQP(string REELID, string EquipmentNo, string OPNo, string UserNo, ref string MSG) {
            return base.Channel.LotLogon_Cancel_EQP(REELID, EquipmentNo, OPNo, UserNo, ref MSG);
        }
        
        public string GetPNList_TEST(string InXml) {
            return base.Channel.GetPNList_TEST(InXml);
        }
        
        public bool GetPNList(ref System.Data.DataSet dsPNLIST, ref string MSG) {
            return base.Channel.GetPNList(ref dsPNLIST, ref MSG);
        }
        
        public string ShipID_Use_Record_TEST(string InXml) {
            return base.Channel.ShipID_Use_Record_TEST(InXml);
        }
        
        public bool ShipID_Use_Record(string ShipID, string Equipmentno, string UserNo, ref System.Data.DataSet dsShipIDUse, ref string MSG) {
            return base.Channel.ShipID_Use_Record(ShipID, Equipmentno, UserNo, ref dsShipIDUse, ref MSG);
        }
        
        public string LotWaitSet_TEST(string InXml) {
            return base.Channel.LotWaitSet_TEST(InXml);
        }
        
        public bool LotWaitSet(string LotNo, string Equipmentno, string UserNo, ref string MSG) {
            return base.Channel.LotWaitSet(LotNo, Equipmentno, UserNo, ref MSG);
        }
        
        public string GETLotInfo_Sorter_TEST(string InXml, string CarrierNo, string EquipmentNo) {
            return base.Channel.GETLotInfo_Sorter_TEST(InXml, CarrierNo, EquipmentNo);
        }
        
        public bool GETLotInfo_Sorter(string LotNo, string OPNo, string EquipmentNo, string UserNo, ref System.Data.DataSet dsSorterLotnoInfo, ref string MSG, string CarrierNo) {
            return base.Channel.GETLotInfo_Sorter(LotNo, OPNo, EquipmentNo, UserNo, ref dsSorterLotnoInfo, ref MSG, CarrierNo);
        }
        
        public string GetShipIDInfo_TEST(string InXml) {
            return base.Channel.GetShipIDInfo_TEST(InXml);
        }
        
        public bool GetShipIDInfo(string ShipID, string VendorNo, ref System.Data.DataSet dsShipIDInfo, ref string MSG) {
            return base.Channel.GetShipIDInfo(ShipID, VendorNo, ref dsShipIDInfo, ref MSG);
        }
        
        public string GetBagInfo_TEST(string InXml) {
            return base.Channel.GetBagInfo_TEST(InXml);
        }
        
        public bool GetBagInfo(string ShipID, ref System.Data.DataSet dsBag, ref string MSG) {
            return base.Channel.GetBagInfo(ShipID, ref dsBag, ref MSG);
        }
        
        public string LoadCIEXYTarget_TEST(string InXml) {
            return base.Channel.LoadCIEXYTarget_TEST(InXml);
        }
        
        public bool LoadCIEXYTarget(string LotNo, ref System.Data.DataSet dsCIE, ref string MSG) {
            return base.Channel.LoadCIEXYTarget(LotNo, ref dsCIE, ref MSG);
        }
        
        public string LoadMachState(string EquipmentNo) {
            return base.Channel.LoadMachState(EquipmentNo);
        }
        
        public string LoadBatchMachState(ref System.Data.DataTable dtEquipmentState) {
            return base.Channel.LoadBatchMachState(ref dtEquipmentState);
        }
        
        public bool changeMachState(string ChangeStateName, string EquipmentNo, string UserNo, string ReasonNo, string description, ref string MSG) {
            return base.Channel.changeMachState(ChangeStateName, EquipmentNo, UserNo, ReasonNo, description, ref MSG);
        }
        
        public bool Login(string UserNo, string PassWord) {
            return base.Channel.Login(UserNo, PassWord);
        }
        
        public bool CheckDBConnection() {
            return base.Channel.CheckDBConnection();
        }
        
        public System.Data.DataSet fnGetlotBasInfo(string LotNo) {
            return base.Channel.fnGetlotBasInfo(LotNo);
        }
        
        public System.Data.DataSet fnGetlotBasInfo_MESBOM(string LotNo) {
            return base.Channel.fnGetlotBasInfo_MESBOM(LotNo);
        }
        
        public System.Data.DataSet fnGetMgzNedChkOut(string EquipmentNo) {
            return base.Channel.fnGetMgzNedChkOut(EquipmentNo);
        }
        
        public bool Login_rtname(string UserNo, string PassWord, ref string UserName) {
            return base.Channel.Login_rtname(UserNo, PassWord, ref UserName);
        }
        
        public string Login_chkGroup_TEST(string UserNo, string PassWord, string Group) {
            return base.Channel.Login_chkGroup_TEST(UserNo, PassWord, Group);
        }
        
        public bool Login_chkGroup(string UserNo, string PassWord, string Group, ref string UserName) {
            return base.Channel.Login_chkGroup(UserNo, PassWord, Group, ref UserName);
        }
        
        public System.Data.DataSet fnGetSfcidMach(string EQPType) {
            return base.Channel.fnGetSfcidMach(EQPType);
        }
        
        public System.Data.DataSet fnGetT_HINCD_BAS_INFO(string ProductNo, string ParameterName) {
            return base.Channel.fnGetT_HINCD_BAS_INFO(ProductNo, ParameterName);
        }
        
        public System.Data.DataSet fnGetRecipeParameter(string ProductNo, string ParameterName, string OPNO) {
            return base.Channel.fnGetRecipeParameter(ProductNo, ParameterName, OPNO);
        }
        
        public System.Data.DataSet fnGetNeedCntDwnMgz(string EQPNo) {
            return base.Channel.fnGetNeedCntDwnMgz(EQPNo);
        }
        
        public System.Data.DataSet fnGetNeedCntDwnMgz_ALL(string EQPNo) {
            return base.Channel.fnGetNeedCntDwnMgz_ALL(EQPNo);
        }
        
        public System.Data.DataSet fnGetMTL(string MTL_KEY) {
            return base.Channel.fnGetMTL(MTL_KEY);
        }
        
        public string GetCSTInfo_ByLotno_TEST(string LotNo) {
            return base.Channel.GetCSTInfo_ByLotno_TEST(LotNo);
        }
        
        public string GetCSTInfo_ByLotno(string LotNo) {
            return base.Channel.GetCSTInfo_ByLotno(LotNo);
        }
        
        public string GetCSTInfo_TEST(string CasetteNo) {
            return base.Channel.GetCSTInfo_TEST(CasetteNo);
        }
        
        public System.Data.DataSet GetCSTInfo(string CasetteNo) {
            return base.Channel.GetCSTInfo(CasetteNo);
        }
        
        public System.Data.DataSet fnGetPGM_TASK(string MONO, string LOTNO) {
            return base.Channel.fnGetPGM_TASK(MONO, LOTNO);
        }
        
        public System.Data.DataSet fnGetPGM_TASK_ByRID(string RID) {
            return base.Channel.fnGetPGM_TASK_ByRID(RID);
        }
        
        public System.Data.DataSet fnGetPGM_TASK_ByRIDStatus(string RID, string Status) {
            return base.Channel.fnGetPGM_TASK_ByRIDStatus(RID, Status);
        }
        
        public System.Data.DataSet fnLoadGlueLife(string PRODUCTNO) {
            return base.Channel.fnLoadGlueLife(PRODUCTNO);
        }
        
        public System.Data.DataSet fnLoadFormula(string PRODUCTNO, string LF_VENDOR) {
            return base.Channel.fnLoadFormula(PRODUCTNO, LF_VENDOR);
        }
        
        public System.Data.DataSet fnLoadFormula_config(string PRODUCTNO, string LF_VENDOR) {
            return base.Channel.fnLoadFormula_config(PRODUCTNO, LF_VENDOR);
        }
        
        public System.Data.DataSet fnLoadinjection(string LOTNO_ON, string MACH_ID, string BARCODE_ID, string LOTNO) {
            return base.Channel.fnLoadinjection(LOTNO_ON, MACH_ID, BARCODE_ID, LOTNO);
        }
        
        public bool Editinjection_t1_end_TEST(string RID, double addtime) {
            return base.Channel.Editinjection_t1_end_TEST(RID, addtime);
        }
        
        public bool Editinjection_t1_end(string RID, string used_time_t1_e, string used_t2, string used_time_t2_s, double lifetime_t2, string EQUIPMENTNO) {
            return base.Channel.Editinjection_t1_end(RID, used_time_t1_e, used_t2, used_time_t2_s, lifetime_t2, EQUIPMENTNO);
        }
        
        public string Editinjection_t1_end_STR(string RID, string used_time_t1_e, string used_t2, string used_time_t2_s, double lifetime_t2, string EQUIPMENTNO) {
            return base.Channel.Editinjection_t1_end_STR(RID, used_time_t1_e, used_t2, used_time_t2_s, lifetime_t2, EQUIPMENTNO);
        }
        
        public bool Editinjection_t2_end_TEST(string RID) {
            return base.Channel.Editinjection_t2_end_TEST(RID);
        }
        
        public bool Editinjection_t2_end(string RID, string used_time_t2_e) {
            return base.Channel.Editinjection_t2_end(RID, used_time_t2_e);
        }
        
        public string Editinjection_t2_end_STR(string RID, string used_time_t2_e) {
            return base.Channel.Editinjection_t2_end_STR(RID, used_time_t2_e);
        }
        
        public System.Data.DataSet fnLoadinjection_history_t2(string ORG_LOTNO, string LOTNO, string EQUIPMENTNO) {
            return base.Channel.fnLoadinjection_history_t2(ORG_LOTNO, LOTNO, EQUIPMENTNO);
        }
        
        public bool Addinjection_history_t2(string ORG_LOTNO, string LOTNO, string BARCODE_ID, string EQUIPMENTNO, string FOLLOWED_REASON, string CREATEDATE, string CREATOR, string GROUP_KEY) {
            return base.Channel.Addinjection_history_t2(ORG_LOTNO, LOTNO, BARCODE_ID, EQUIPMENTNO, FOLLOWED_REASON, CREATEDATE, CREATOR, GROUP_KEY);
        }
        
        public System.Data.DataSet fnLoadEQPPRSTATE(string CARRIERNO, string EQPNO_PR, string LOTNO, string STATE, string AddSQL) {
            return base.Channel.fnLoadEQPPRSTATE(CARRIERNO, EQPNO_PR, LOTNO, STATE, AddSQL);
        }
        
        public bool AddEQPPRSTATE(string CARRIERNO, string EQPNO_PR, string EQPNO_GL, string PRODUCTNO, string LOTNO, string CREATOR, string STATE, string HZ, string RUNTIME) {
            return base.Channel.AddEQPPRSTATE(CARRIERNO, EQPNO_PR, EQPNO_GL, PRODUCTNO, LOTNO, CREATOR, STATE, HZ, RUNTIME);
        }
    }
}
